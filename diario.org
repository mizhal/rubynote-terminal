* Proyecto Rubynote
** FOCO
** TODO Pasos
*** TODO pruebas de lineas de ejecución
Probar los casos de uso fundamentales:
 crear nota
 crear libreta
 entrar en sesion
 etc...
*** TODO revisar el código para eliminar partes no usadas
Algunos metodos o clases que fueron descartados en algun rediseño y no los borré a tiempo
** TODO Pruebas
*** LOGIN
- loguearse como usuario admin
- salir de sesion de usuario admin
- loguearse como usuario normal
- salir de sesion como usuario normal
- loguearse con login erroneo
- loguearse con password erroneo
*** CUENTAS
- modificar estado de una cuenta
  de a a b y de b a a 
*** GEST USUARIOS
- crear usuario mediante registro
- crear usuario desde el panel de admin
- borrar usuario y comprobar eliminacion de libretas y cuentas
** CHECKLIST
*** Los métodos deben ser de la forma camelCase
*** Los require_relative deben estar dentro de la clase, en las primeras lineas
Para evitar dependencias circulares no resueltas
** Funcionalidades
*** Existe siempre una cuenta de administrador
*** Autenticarse como admin
*** Autenticarse como usuario comun
*** Registrarse como usuario
*** Funciones de Admin
**** Gestión de Usuarios
***** Crear usuario
Análogo al de registrarse
***** Borrar Usuario
Introducir login y confirmar
***** Listar Usuarios
Muestra una lista paginada
**** Activar cuenta
**** Desactivar cuenta
**** Modificar el tipo de usuario (premium o normal)
Flujo:
introduzca el usuario
MUESTRA: el usuario es PREMIUM/NORMAL
¿cambiar? SI/NO
**** Cambiar la clave de administrador
Pide clave actual, la valida y clave nueva
**** Exportar la base de datos
pide el nombre de archivo
**** Importar la base de datos
pide el nombre de archivo
*** Funciones de Usuario Normal
**** Notas

***** Buscar notas mediante tags
Se debe estudiar si usar una formula del tipo
(tag1 & tag2 & tag3) or (-tag2)
O algo más sencillo
***** Listar todas las notas con paginacion

***** Ver las notas de una tag

***** Ver el detalle de una nota (paginada)

***** Editar una nota

***** Crear una nota

***** Modificar las tags de una nota

***** Borrar una nota


**** Libretas

***** Crear una libreta
      
***** Entrar en una libreta

***** Borrar una libreta

***** Listar las notas de una libreta

***** Buscar en las notas de una libreta
      

**** Configuracion y cuenta

***** Definir el alto en lineas de una pantalla

***** Modificar su clave

***** Modificar sus datos
** Indice
   [[Pruebas]]
   [[Diario]]
   [[Codice]]
   
   [[Refactoring Log]]
** Trucos de Emacs
*** visual-line-mode
Para tener word-wrap en el editor
*** Ctrl-c .
Para introducir una fecha (timestamp)
** Notas
** Enlaces
*** Unit Testing with Ruby :unit test:ruby:howto:
http://en.wikibooks.org/wiki/Ruby_Programming/Unit_testing
** Codice
*** Code Coverage
:CUSTOM_ID: code coverage
Permiten determinar las partes del código que no se están ejecutando en una prueba
*** SimpleCov 
:CUSTOM_ID: simplecov
:CLASS: Herramienta
:URL: https://github.com/colszowka/simplecov
:Herramienta.implementa: [[#code coverage]]
is a code coverage analysis tool for Ruby 1.9. It uses 1.9’s built-in Coverage library to gather code coverage data, but makes processing it’s results much easier by providing a clean API to filter, group, merge, format and display those results, thus giving you a complete code coverage suite with just a couple lines of code.
** Archivos
*** tests/Test01_probar_validadores.rb
:CUSTOM_ID: probar_validadores
Implementa las pruebas de cobertura 1 positivo y 1 negativo sobre cada uno de los validadores genéricos definidos en [[class Validacion::ValidadorGenerico]]
** Objetos de Código
*** class Validacion::ValidadorGenerico
Implementa una serie de validaciones típicas
** Pruebas
*** Prueba 1: Crear un usuario normal con login 'admin'
    :CUSTOM_ID: prueba001
    Debe fallar porque el sistema siempre tiene un usuario admin creado por la instalación. Existe la posibilidad de que no falle porque el usuario admin y los usuarios comunes son clases distintas derivadas de una misma clase padre.
*** Prueba 2:
    :CUSTOM_ID: prueba002
    
** Refactoring Log
*** <2012-12-25 mar>
    Inicio
** Diario
*** <2012-12-26 mié>
Hecho un test unitario en [[#probar_validadores]] para verificar las diferentes validaciones genéricas (sin_espacion, longitud, presencia, etc)
*** <2012-12-25 mar>
Conseguido hacer la validación de unicidad del login de una manera mas o menos elegante (haciendo que el archivo lleve cuenta de las herencias y con una validación "custom").
*** <2012-12-24 lun>
He reorganizado los requires y la serialización y ahora si creo que está correctamente 
simplificada (toda la serializacion incluido los métodos "estilo activerecord" en un solo 
modulo y los require de dependencias circulares después de la cabecera de la clase al estilo
C++).
Mi problema ahora es como hacer las validaciones en los modelos de una manera que no sea
excesivamente cansina, intentando imitar el estilo rails.
*** <2012-12-23 dom>
He implementado la vista /admin/listaUsuarios correctamente paginada.
Ahora toca implementar la creación y eliminación de usuarios
*** <2012-12-23 dom>
He conseguido entrar como administrador y que salga el menu de administrador
Ahora hay que probar el menu de usuario normal que no esta hecho y añadir las acciones/controladores al resto de menus
Por el momento la serialización funciona correctamente, aunque hay que simplificarla, probablemente 
unificando el modulo Serializacion y RegistroActivo
** QuestLog
** Foco
*** Modificando las validaciones en UI
Estoy cambiando la manera de hacer las validaciones en la UI.   
** Errores y Defectos
*** En usuario.rb:39 el nombre de la funcion que autentica
:CUSTOM_ID: Defecto001   
Actualmente se llama validar y debería llamarse autenticar. Tambien las siguientes
